// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230506011706-29ebe3262399 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// AssignedSegmentDTO defines model for AssignedSegmentDTO.
type AssignedSegmentDTO struct {
	SegmentName string `json:"segment_name"`
	Ttl         *int32 `json:"ttl,omitempty"`
}

// ChangeUserSegmentsReq defines model for ChangeUserSegmentsReq.
type ChangeUserSegmentsReq struct {
	// AddSegments Добавляемые сегменты
	AddSegments []AssignedSegmentDTO `json:"add_segments"`

	// DeleteSegments Удаляемые сегменты
	DeleteSegments []string `json:"delete_segments"`
	UserId         int      `json:"user_id"`
}

// CreateReportReq defines model for CreateReportReq.
type CreateReportReq struct {
	// From Начальная дата отчета
	From *openapi_types.Date `json:"from,omitempty"`

	// To Конечная дата отчета
	To *openapi_types.Date `json:"to,omitempty"`

	// UserIds ID пользователей
	UserIds *[]int `json:"user_ids,omitempty"`
}

// CreateReportResp defines model for CreateReportResp.
type CreateReportResp struct {
	// Link Ссылка на отчет
	Link string `json:"link"`
}

// CreateSegmentReq defines model for CreateSegmentReq.
type CreateSegmentReq struct {
	// SegmentName Название сегмента
	SegmentName string `json:"segment_name"`

	// UserPercentage Процент пользователей в сегменте
	UserPercentage *int `json:"user_percentage,omitempty"`
}

// DeleteSegmentParams defines parameters for DeleteSegment.
type DeleteSegmentParams struct {
	// SegmentName Название сегмента
	SegmentName string `form:"segment_name" json:"segment_name"`
}

// GetUserSegmentsParams defines parameters for GetUserSegments.
type GetUserSegmentsParams struct {
	// UserId ID пользователя
	UserId int `form:"user_id" json:"user_id"`
}

// PostReportJSONRequestBody defines body for PostReport for application/json ContentType.
type PostReportJSONRequestBody = CreateReportReq

// PostSegmentJSONRequestBody defines body for PostSegment for application/json ContentType.
type PostSegmentJSONRequestBody = CreateSegmentReq

// PostUserSegmentsJSONRequestBody defines body for PostUserSegments for application/json ContentType.
type PostUserSegmentsJSONRequestBody = ChangeUserSegmentsReq

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Выгрузить историю сегментов пользователя
	// (POST /report)
	PostReport(ctx echo.Context) error
	// Удалить сегмент
	// (DELETE /segment)
	DeleteSegment(ctx echo.Context, params DeleteSegmentParams) error
	// Создать сегмент
	// (POST /segment)
	PostSegment(ctx echo.Context) error
	// Получить сегменты пользователя
	// (GET /user/segments)
	GetUserSegments(ctx echo.Context, params GetUserSegmentsParams) error
	// Добавить и удалить сегменты пользователя
	// (POST /user/segments)
	PostUserSegments(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostReport converts echo context to params.
func (w *ServerInterfaceWrapper) PostReport(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReport(ctx)
	return err
}

// DeleteSegment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSegment(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteSegmentParams
	// ------------- Required query parameter "segment_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "segment_name", ctx.QueryParams(), &params.SegmentName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segment_name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSegment(ctx, params)
	return err
}

// PostSegment converts echo context to params.
func (w *ServerInterfaceWrapper) PostSegment(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSegment(ctx)
	return err
}

// GetUserSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserSegments(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserSegmentsParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserSegments(ctx, params)
	return err
}

// PostUserSegments converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserSegments(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserSegments(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/report", wrapper.PostReport)
	router.DELETE(baseURL+"/segment", wrapper.DeleteSegment)
	router.POST(baseURL+"/segment", wrapper.PostSegment)
	router.GET(baseURL+"/user/segments", wrapper.GetUserSegments)
	router.POST(baseURL+"/user/segments", wrapper.PostUserSegments)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"SbEYCpQTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
