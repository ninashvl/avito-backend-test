// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.5-0.20230825110459-3650493c4657 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// AssignedSegmentDTO defines model for AssignedSegmentDTO.
type AssignedSegmentDTO struct {
	SegmentName string `json:"segment_name"`
	Ttl         *int32 `json:"ttl,omitempty"`
}

// ChangeUserSegmentsReq defines model for ChangeUserSegmentsReq.
type ChangeUserSegmentsReq struct {
	// AddSegments Добавляемые сегменты
	AddSegments []AssignedSegmentDTO `json:"add_segments"`

	// DeleteSegments Удаляемые сегменты
	DeleteSegments []string `json:"delete_segments"`
	UserId         int      `json:"user_id"`
}

// CreateSegmentReq defines model for CreateSegmentReq.
type CreateSegmentReq struct {
	// SegmentName Название сегмента
	SegmentName string `json:"segment_name"`

	// UserPercentage Процент пользователей в сегменте
	UserPercentage *int `json:"user_percentage,omitempty"`
}

// DeleteSegmentParams defines parameters for DeleteSegment.
type DeleteSegmentParams struct {
	// SegmentName Название сегмента
	SegmentName string `form:"segment_name" json:"segment_name"`
}

// GetUserSegmentsParams defines parameters for GetUserSegments.
type GetUserSegmentsParams struct {
	// UserId ID пользователя
	UserId int `form:"user_id" json:"user_id"`
}

// PostSegmentJSONRequestBody defines body for PostSegment for application/json ContentType.
type PostSegmentJSONRequestBody = CreateSegmentReq

// PostUserSegmentsJSONRequestBody defines body for PostUserSegments for application/json ContentType.
type PostUserSegmentsJSONRequestBody = ChangeUserSegmentsReq

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Удалить сегмент
	// (DELETE /segment)
	DeleteSegment(ctx echo.Context, params DeleteSegmentParams) error
	// Создать сегмент
	// (POST /segment)
	PostSegment(ctx echo.Context) error
	// Получить сегменты пользователя
	// (GET /user/segments)
	GetUserSegments(ctx echo.Context, params GetUserSegmentsParams) error
	// Добавить и удалить сегменты пользователя
	// (POST /user/segments)
	PostUserSegments(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteSegment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSegment(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteSegmentParams
	// ------------- Required query parameter "segment_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "segment_name", ctx.QueryParams(), &params.SegmentName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segment_name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSegment(ctx, params)
	return err
}

// PostSegment converts echo context to params.
func (w *ServerInterfaceWrapper) PostSegment(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSegment(ctx)
	return err
}

// GetUserSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserSegments(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserSegmentsParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserSegments(ctx, params)
	return err
}

// PostUserSegments converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserSegments(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUserSegments(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/segment", wrapper.DeleteSegment)
	router.POST(baseURL+"/segment", wrapper.PostSegment)
	router.GET(baseURL+"/user/segments", wrapper.GetUserSegments)
	router.POST(baseURL+"/user/segments", wrapper.PostUserSegments)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWXWvjVhP+K2Le91LE3o+Lojtv4i6+2CbE29yEYLTWxNbW+sjRcagJgnzAtpDA3vSu",
	"lFD6B1w3Ik6zdv7CnH9URlIsWZYd07T0xqzOnsw8M88zz5wTaHuO77noygCMEwjaXXTM+J+1ILA7LlpN",
	"7Djoyq3323zqC89HIW1Mrif/13JNB/lbDnwEAwIpbLcDoQ5S9vj80BOOKcEA25WvXoL+eNF2JXZQQBjq",
	"IPCobwu0wNifj3swu+59+IhtyXE3u6bbwW8DFCm8YBePFvGZltVKY8XfFgZtYfvS9lwwgH6iKf1OQxrR",
	"vfpMEX1RlxRp6owi+oO+UEQTda4uQQdbohMH+L/AQzDgf5WsbZW0Z5WShoUz6KYQ5oC/LeyhxFWofqMb",
	"Gq6NaLHlhYT9AEXLtnJ3l3V9rluLSLNQpYwINCWmtZeSURRLoexfaEi3NKIhTWi8UDQNM9VktcaAfBRt",
	"dKXZKYt6rU5pqj4lQTR6oCndqyu6pSmnUucU0T1FdKfRqJgxerZO+brtHnqLuGo7DY1umGRNXdCDOk1U",
	"yJlpzIeF4tUn7gnDXFrBBsO1ZY8B8GBoKRcmp9SaKI7tNmq1nQbocIwiSIC82KhuVLmVno+u6dtgwKv4",
	"SAfflN2YuEpaZlIGi2K1atX5gmKX4FafIc4sYpANCwzYihOk2GMUwnRQogjA2P87orH54lEfxQB0SLQ3",
	"z1ueUin6qKcuWDJd4QFfDnzPDRJNv6xWy3qhzuiBIvUjTWjKqC6S5iT0lsEMdXhdFuqNaWmMDgOZ3Hld",
	"ku7XfDCNJhTxz5Du6IbPYtUGfccxxSDHFI3VuboqQGENmR1uNTxScBDq4HuBLE08pds4WpQkntJIXdJd",
	"IegK0S7Qv+MFMiM/Lf2NZw04fdtzZapD0/d7djv+u8rHgOGc5GhbZdMLRhXOTzVLIFyg+cU6NJ/N+vEc",
	"mufZmvV4XbZCHSrsi5X8iulgGX/XMS0X6oe8MB9orM7oTxoW4U9ptP4Yv0WZ385PDXJja1XoshF+3EVr",
	"TG/m3kvG9wld4fem47Ov7kNtr/F+u7W33dist97Vm83a23oT9PR4p7779fbuu9o3m/XWXq3JCyHDsu7C",
	"DuM3Qr433ndLdfNhHXu4Lu3r1dNGkcmjzCpWm/qjLlkEqyyk8ARjsxjP/HLJMik1jYLa/hXnKH10/mP2",
	"QTdZL2YDmevGsu3Bc6kulpPx34gnIzYRT76QZ8spzoXieMmr4GeasoHFsSazhaROacS//JAVPTCgK6Vv",
	"VCo9r232ul4gja+q1SqEB+FfAQAA//+T/7ARFg0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
